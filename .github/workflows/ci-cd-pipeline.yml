# CodePal CI/CD Pipeline
# Automated testing, building, and deployment workflow

name: CodePal CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run ESLint
        run: npm run lint:all

      - name: Run TypeScript type checking
        run: npm run type-check:all

      - name: Run Prettier check
        run: npm run format:check

      - name: Run SonarQube analysis
        uses: sonarqube-quality-gate-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: security-scan
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: codepal_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/codepal_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test

      - name: Run database migrations
        run: |
          npm run db:migrate:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/codepal_test

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/codepal_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/codepal_test
          REDIS_URL: redis://localhost:6379

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/codepal_test
          REDIS_URL: redis://localhost:6379

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        run: npm run lighthouse:ci

      - name: Run load tests
        run: npm run test:load

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            lighthouse-results/
            load-test-results/

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, performance]
    outputs:
      web-image: ${{ steps.build-web.outputs.image }}
      api-image: ${{ steps.build-api.outputs.image }}
      worker-image: ${{ steps.build-worker.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Web Application
        id: build-web
        uses: docker/build-push-action@v5
        with:
          context: ./apps/web
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/web.tar

      - name: Build API Server
        id: build-api
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/api.tar

      - name: Build AI Worker
        id: build-worker
        uses: docker/build-push-action@v5
        with:
          context: ./apps/ai-worker
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/worker:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/worker.tar

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: /tmp/*.tar

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: docker-images
          path: /tmp

      - name: Load Docker images
        run: |
          docker load < /tmp/web.tar
          docker load < /tmp/api.tar
          docker load < /tmp/worker.tar

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f infrastructure/k8s/staging/
          kubectl set image deployment/codepal-web web=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ github.sha }}
          kubectl set image deployment/codepal-api api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
          kubectl set image deployment/codepal-worker worker=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/worker:${{ github.sha }}

      - name: Run smoke tests
        run: npm run test:smoke:staging

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'Staging deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: docker-images
          path: /tmp

      - name: Load Docker images
        run: |
          docker load < /tmp/web.tar
          docker load < /tmp/api.tar
          docker load < /tmp/worker.tar

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Create backup
        run: |
          export KUBECONFIG=kubeconfig
          kubectl exec deployment/codepal-db -- pg_dump -U postgres codepal > backup_$(date +%Y%m%d_%H%M%S).sql

      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f infrastructure/k8s/production/
          kubectl set image deployment/codepal-web web=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ github.sha }}
          kubectl set image deployment/codepal-api api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
          kubectl set image deployment/codepal-worker worker=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/worker:${{ github.sha }}

      - name: Wait for deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl rollout status deployment/codepal-web --timeout=300s
          kubectl rollout status deployment/codepal-api --timeout=300s
          kubectl rollout status deployment/codepal-worker --timeout=300s

      - name: Run health checks
        run: npm run health:check:production

      - name: Run smoke tests
        run: npm run test:smoke:production

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'Production deployment successful! 🚀'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security and Compliance
  security-compliance:
    name: Security & Compliance
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run dependency vulnerability scan
        run: npm audit --audit-level=high --json > audit-results.json

      - name: Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: security-audit
          path: audit-results.json

      - name: Run compliance checks
        run: npm run compliance:check

  # Monitoring and Alerting
  monitoring:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy monitoring stack
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f infrastructure/monitoring/

      - name: Setup alerting rules
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f infrastructure/monitoring/alerting/

      - name: Verify monitoring
        run: |
          export KUBECONFIG=kubeconfig
          kubectl get pods -n monitoring
          kubectl get svc -n monitoring

  # Documentation and Release
  documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: monitoring
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate API documentation
        run: npm run docs:generate

      - name: Build documentation site
        run: npm run docs:build

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/build

      - name: Create release notes
        run: npm run release:notes

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## What's Changed
            - Automated deployment from CI/CD pipeline
            - Security and performance improvements
            - Bug fixes and enhancements
            
            ## Deployment Details
            - Build: ${{ github.sha }}
            - Environment: Production
            - Timestamp: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

# Post-deployment verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: documentation
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Run end-to-end tests
        run: npm run test:e2e:production

      - name: Check application health
        run: npm run health:check:production

      - name: Verify monitoring
        run: npm run monitoring:verify

      - name: Performance validation
        run: npm run performance:validate

      - name: Security validation
        run: npm run security:validate

      - name: Final notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🎉 CodePal v${{ github.run_number }} successfully deployed and verified!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 