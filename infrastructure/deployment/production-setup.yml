# CodePal Platform - Production Deployment Configuration
# Version: 13.0
# Deployment Date: Q4 2024

# =============================================================================
# INFRASTRUCTURE COMPONENTS
# =============================================================================

# Frontend (Next.js) - Vercel
frontend:
  platform: vercel
  domain: codepal.ai
  environment:
    NODE_ENV: production
    NEXT_PUBLIC_API_URL: https://api.codepal.ai
    NEXT_PUBLIC_WS_URL: wss://api.codepal.ai
    NEXT_PUBLIC_ANALYTICS_ID: G-XXXXXXXXXX
  scaling:
    min_instances: 2
    max_instances: 10
  monitoring:
    - vercel_analytics
    - sentry_error_tracking
    - lighthouse_performance

# Backend API (Node.js/Express) - AWS ECS
backend:
  platform: aws_ecs
  cluster: codepal-api-cluster
  service: codepal-api-service
  domain: api.codepal.ai
  environment:
    NODE_ENV: production
    DATABASE_URL: ${DATABASE_URL}
    JWT_SECRET: ${JWT_SECRET}
    OPENAI_SECRET_KEY: ${OPENAI_SECRET_KEY}
    REDIS_URL: ${REDIS_URL}
    DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}
  scaling:
    min_capacity: 2
    max_capacity: 20
    target_cpu_utilization: 70
  monitoring:
    - cloudwatch_logs
    - cloudwatch_metrics
    - xray_tracing

# AI Worker (Cloudflare Workers)
ai_worker:
  platform: cloudflare_workers
  domain: ai.codepal.ai
  environment:
    DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}
    REDIS_URL: ${REDIS_URL}
  scaling:
    max_requests_per_minute: 10000
  monitoring:
    - cloudflare_analytics
    - cloudflare_logs

# Database (PostgreSQL) - AWS RDS
database:
  platform: aws_rds
  engine: postgresql
  version: 15.4
  instance_class: db.r6g.xlarge
  storage:
    allocated_storage: 100
    max_storage: 1000
    storage_type: gp3
  backup:
    retention_period: 30
    backup_window: 03:00-04:00
  monitoring:
    - enhanced_monitoring
    - performance_insights

# Cache (Redis) - AWS ElastiCache
cache:
  platform: aws_elasticache
  engine: redis
  version: 7.0
  node_type: cache.r6g.large
  cluster_size: 3
  monitoring:
    - cloudwatch_metrics
    - redis_cloudwatch

# =============================================================================
# MONITORING & LOGGING
# =============================================================================

monitoring:
  # Application Performance Monitoring
  apm:
    provider: datadog
    service_name: codepal-platform
    environment: production
  
  # Log Aggregation
  logging:
    provider: elk_stack
    elasticsearch:
      instance_count: 3
      instance_type: t3.medium.elasticsearch
    logstash:
      instance_count: 2
    kibana:
      instance_count: 1
  
  # Metrics & Alerting
  metrics:
    provider: prometheus
    grafana:
      instance_count: 1
      dashboards:
        - system_overview
        - application_metrics
        - agent_performance
        - user_analytics
  
  # Uptime Monitoring
  uptime:
    provider: pingdom
    checks:
      - frontend_health
      - api_health
      - database_health
      - cache_health

# =============================================================================
# SECURITY & COMPLIANCE
# =============================================================================

security:
  # SSL/TLS Certificates
  ssl:
    provider: aws_certificate_manager
    domains:
      - codepal.ai
      - api.codepal.ai
      - ai.codepal.ai
      - *.codepal.ai
  
  # Web Application Firewall
  waf:
    provider: aws_waf
    rules:
      - rate_limiting
      - sql_injection_protection
      - xss_protection
      - ddos_protection
  
  # Secrets Management
  secrets:
    provider: aws_secrets_manager
    rotation: enabled
    rotation_interval: 30_days
  
  # Compliance
  compliance:
    gdpr: enabled
    soc2: enabled
    audit_logging: enabled

# =============================================================================
# CI/CD PIPELINE
# =============================================================================

cicd:
  provider: github_actions
  workflows:
    - name: test_and_build
      triggers: [push, pull_request]
      steps:
        - test_coverage
        - security_scan
        - build_artifacts
        - docker_build
    
    - name: deploy_staging
      triggers: [push_to_staging]
      steps:
        - deploy_frontend_staging
        - deploy_backend_staging
        - run_integration_tests
        - performance_tests
    
    - name: deploy_production
      triggers: [manual]
      steps:
        - deploy_frontend_production
        - deploy_backend_production
        - health_checks
        - monitoring_setup

# =============================================================================
# LOAD TESTING CONFIGURATION
# =============================================================================

load_testing:
  tool: artillery
  scenarios:
    - name: concurrent_users
      target: 10000
      duration: 300
      phases:
        - duration: 60
          arrival_rate: 100
        - duration: 180
          arrival_rate: 200
        - duration: 60
          arrival_rate: 100
    
    - name: agent_performance
      target: 1000
      duration: 120
      phases:
        - duration: 60
          arrival_rate: 50
        - duration: 60
          arrival_rate: 100

# =============================================================================
# DEPLOYMENT CHECKLIST
# =============================================================================

deployment_checklist:
  pre_deployment:
    - [ ] All tests passing (97%+ coverage)
    - [ ] Security audit completed
    - [ ] Performance benchmarks met
    - [ ] Environment variables configured
    - [ ] SSL certificates provisioned
    - [ ] Database migrations applied
    - [ ] Monitoring dashboards configured
  
  deployment:
    - [ ] Frontend deployed to Vercel
    - [ ] Backend deployed to AWS ECS
    - [ ] AI Worker deployed to Cloudflare
    - [ ] Database cluster provisioned
    - [ ] Redis cluster provisioned
    - [ ] Load balancers configured
    - [ ] DNS records updated
  
  post_deployment:
    - [ ] Health checks passing
    - [ ] Load testing completed
    - [ ] Monitoring alerts configured
    - [ ] Backup systems verified
    - [ ] Documentation updated
    - [ ] Support team notified
    - [ ] Marketing materials ready

# =============================================================================
# COST ESTIMATION
# =============================================================================

cost_estimation:
  monthly_costs:
    frontend_vercel: $50
    backend_aws_ecs: $300
    database_aws_rds: $400
    cache_aws_elasticache: $200
    monitoring_datadog: $100
    logging_elk: $150
    cdn_cloudflare: $20
    total_estimated: $1220
  
  scaling_costs:
    users_1000: $1220/month
    users_5000: $2500/month
    users_10000: $4500/month
    users_50000: $15000/month 